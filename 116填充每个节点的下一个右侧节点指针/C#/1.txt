/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/

public class Solution 
{
    public Node Connect(Node root) 
    {
        if(root == null)
            return null;
        Queue<Node> queue = new Queue<Node>();
        queue.Enqueue(root);
        while(queue.Count != 0)
        {
            int size = queue.Count;
            for(int i = 0; i < size; i++)
            {
                Node nowNode = queue.Dequeue();
                
                if(i < size - 1)
                    nowNode.next = queue.Peek();
                if(nowNode.left != null)
                    queue.Enqueue(nowNode.left);
                if(nowNode.right != null)
                    queue.Enqueue(nowNode.right);
            }
        }
        return root;
    }
}