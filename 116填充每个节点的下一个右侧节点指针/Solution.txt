题干：
给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
初始状态下，所有 next 指针都被设置为 NULL。

解法：
一：题目本身希望我们将二叉树的每一层节点都连接起来形成一个链表。因此直观的做法我们可以对二叉树进行层次遍历，在层次遍历的过程中将我们将二叉树每一层的节点拿出来遍历并连接。

层次遍历基于广度优先搜索，它与广度优先搜索的不同之处在于，广度优先搜索每次只会取出一个节点来拓展，而层次遍历会每次将队列中的所有元素都拿出来拓展，这样能保证每次从队列中拿出来遍历的元素都是属于同一层的，因此我们可以在遍历的过程中修改每个节点的 next 指针，同时拓展下一层的新队列。

二：
一棵树中，存在两种类型的 next 指针。
第一种情况是连接同一个父节点的两个子节点。它们可以通过同一个节点直接访问到，因此执行下面操作即可完成连接。
node.left.next = node.right
第二种情况在不同父亲的子节点之间建立连接，这种情况不能直接连接。
如果每个节点有指向父节点的指针，可以通过该指针找到 next 节点。
node.right.next = node.next.left
建立连接：第N层节点之间建立 next 指针后，再建立第N+1层节点的 next 指针。可以通过 next 指针访问同一层的所有节点，因此可以使用第N层的 next 指针，为第N+1层节点建立 next 指针。
算法：
从根节点开始，由于第0层只有一个节点，所以不需要连接，直接为第1层节点建立next指针即可。该算法中需要注意的一点是，当我们为第N层节点建立next指针时，处于第N−1层。当第N层节点的 next 指针全部建立完成后，移至第N层，建立第N+1层节点的 next 指针。
遍历某一层的节点时，这层节点的next指针已经建立。因此我们只需要知道这一层的最左节点，就可以按照链表方式遍历，不需要使用队列。
