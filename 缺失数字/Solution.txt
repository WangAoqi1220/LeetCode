题干：
给定一个包含 0, 1, 2, ..., n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。
示例 1:
输入: [3,0,1]
输出: 2
示例 2:
输入: [9,6,4,2,3,5,7,0,1]
输出: 8

解法一：
因为0-n的数列，其中缺少一个元素，将nums数组中的元素求和sum，而数列的最大值n为nums.Length（因为包含0），所以说0-n的和即为(len+1)*len/2,那么缺失的数字就是(len+1)*len/2 - sum
解法二：
首先我们对数组进行排序，随后我们可以在常数时间内判断两种特殊情况：0 没有出现在数组的首位，以及 n 没有出现在数组的末位。如果这两种特殊情况都不满足，那么缺失的数字一定在 0 和 n 之间（不包括两者）。此时我们可以在线性时间内扫描这个数组，如果某一个数比它前面的那个数大了超过 1，那么这两个数之间的那个数即为缺失的数字。
解法三：
我们知道数组中有 n 个数，并且缺失的数在 [0..n] 中。因此我们可以先得到 [0..n] 的异或值，再将结果对数组中的每一个数进行一次异或运算。未缺失的数在 [0..n] 和数组中各出现一次，因此异或后得到 0。而缺失的数字只在 [0..n] 中出现了一次，在数组中没有出现，因此最终的异或结果即为这个缺失的数字。
可以将结果的初始值设为 nn，再对数组中的每一个数以及它的下标进行一个异或运算，即：
missing = 4^(0^0)^(1^1)^(2^3)^(3^4)
        = (4^4)^(0^0)^(1^1)^(3^3)^2
		= 0^0^0^0^2
		= 2