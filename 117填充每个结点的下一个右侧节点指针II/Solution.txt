题干：填充一个二叉树的每个next指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
初始状态下，所有 next 指针都被设置为 NULL。

解法：因为必须处理树上的所有节点，所以无法降低时间复杂度，但是可以尝试降低空间复杂度。

在方法一中，因为对树的结构一无所知，所以使用队列保证有序访问同一层的所有节点，并建立它们之间的连接。然而不难发现：一旦在某层的节点之间建立了next指针，那这层节点实际上形成了一个链表。因此，如果先去建立某一层的next指针，再去遍历这一层，就无需再使用队列了。基于该想法，提出降低空间复杂度的思路：如果第i层节点之间已经建立next指针，就可以通过next指针访问该层的所有节点，同时对于每个第i层的节点，我们又可以通过它的left和right指针知道其第i+1层的孩子节点是什么，所以遍历过程中就能够按顺序为第i+1层节点建立next指针。
具体来说：
从根节点开始。因为第0层只有一个节点，不需要处理。可以在上一层为下一层建立next指针。该方法最重要的一点是：位于第x层时为第x+1层建立next指针。一旦完成这些连接操作，移至第x+1层为第x+2层建立next指针。
当遍历到某层节点时，该层节点的next指针已经建立。这样就不需要队列从而节省空间。每次只要知道下一层的最左边的节点，就可以从该节点开始，像遍历链表一样遍历该层的所有节点。
