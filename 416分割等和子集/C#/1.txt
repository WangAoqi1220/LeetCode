public class Solution 
{
    public bool CanPartition(int[] nums) 
    {
        int len = nums.Length;
        if(len < 2)
            return false;
        int sum = 0, max = 0;
        for(int i = 0; i < len; i++)
        {
            sum += nums[i];
            max = max > nums[i]?max:nums[i];
        }
        if(sum%2 != 0)
            return false;
        if(max > sum/2)
            return false;
        int target = sum/2;
        bool[,] dp = new bool[len,target+1];
        for(int j = 0; j < len; j++)
        {
            dp[j,0] = true;
        }
        dp[0,nums[0]] = true;
        for(int m = 1; m < len; m++)
        {
            for(int n = 1; n < target + 1;n++)
            {
                if(nums[m] <= n)
                    dp[m,n] = dp[m - 1,n]||dp[m - 1,n - nums[m]];
                else
                    dp[m,n] = dp[m - 1,n];
            }
        }
        return dp[len - 1,target];
    }
}