题干：给定一个整数数组nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），
返回其最大和。

解法一：贪心算法
使用单个数组作为输入来查找最大（或最小）元素（或总和）的问题，贪心算法是可以在线性时间解决的方法之一。
每一步都选择最佳方案，到最后就是全局最优的方案。
算法：
该算法通用且简单：遍历数组并在每个步骤中更新：
当前元素
当前元素位置的最大和
迄今为止的最大和
时间复杂度：O(N)。只遍历一次数组。
空间复杂度：O(1)，只使用了常数空间。

解法二：分治算法
这个是使用分治法解决问题的典型的例子，并且可以用与合并排序相似的算法求解。下面是用分治法解决问题的模板：

定义基本情况。
将问题分解为子问题并递归地解决它们。
合并子问题的解以获得原始问题的解。
算法：
当最大子数组有 n 个数字时：

若 n==1，返回此元素。
left_sum 为最大子数组前 n/2 个元素，在索引为 (left + right) / 2 的元素属于左子数组。
right_sum 为最大子数组的右子数组，为最后 n/2 的元素。
cross_sum 是包含左右子数组且含索引 (left + right) / 2 的最大值。

解法三：动态规划
在整个数组或在固定大小的滑动窗口中找到总和或最大值或最小值的问题可以通过动态规划（DP）在线性时间内解决。
有两种标准 DP 方法适用于数组：
常数空间，沿数组移动并在原数组修改。
线性空间，首先沿 left->right 方向移动，然后再沿 right->left 方向移动。 合并结果。
我们在这里使用第一种方法，因为可以修改数组跟踪当前位置的最大和。
下一步是在知道当前位置的最大和后更新全局最大和。