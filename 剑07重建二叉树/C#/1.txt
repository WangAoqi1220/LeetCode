/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode BuildTree(int[] preorder, int[] inorder) 
    {
        if(preorder.Length == 0 || inorder.Length == 0 || preorder.Length != inorder.Length) return null;
        int preIndex = 0;
        return BuildTree(preorder, inorder, 0, inorder.Length - 1, ref preIndex);
    }

    public TreeNode BuildTree(int[] preorder, int[] inorder, int inLeft, int inRight, ref int preIndex)
    {
        int val = preorder[preIndex++];
        TreeNode treeNode = new TreeNode(val);

        int l = inLeft;
        while(l < inRight){
            if(inorder[l] == val) break;
            l++;
        }

        if(l - inLeft > 0) treeNode.left = BuildTree(preorder, inorder, inLeft, l - 1, ref preIndex);
        if(inRight - l > 0) treeNode.right = BuildTree(preorder, inorder, l + 1, inRight, ref preIndex);

        return treeNode;
    }
}