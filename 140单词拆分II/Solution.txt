题干：
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。
说明：
分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：
输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：
输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：
输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]

解法：
创建一个hashset来存储wordDict，可以O(1)时间复杂度，去查找是否在此字典中，运用动态规划，dp[i]表示前i个字符能否拆分成字典中的单词，我们用两个游标left，right来做判断，如果两个游标之间的字符可以组成字典中的单词，并且dp[left]值为true，即left左侧的字符可以拆分成若干单词，则dp[right] = true,若遍历结束后，dp[len]为true，即证明该字符串可以拆分，然后我们运用dfs来找出所有的可能性，从右到左遍历，右侧指针代表可以拆分的左边界，如果可以拆分，则递归调用dfs，从而得到所有可能性