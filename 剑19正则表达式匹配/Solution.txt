题干：请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:
输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:
输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:
输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:
输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:
输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。

解法：
运用动态规划来解决这个问题，创造一个dp[s.Length+1][p.Length+1]的bool数组，dp[i][j]表示s的前i项和p的前j项的是否匹配，当s为空串时，如果p[i - 1]为*，则p[i-1]p[i-2]有可能表示0个某字符，则dp[0][i] = dp[0][i-2],特殊处理考虑了之后，我们遍历两个字符串，当两个对应位置字符相等，或者p中该位置为'.'时，dp[i][j] = dp[i-1][j-1]，即这个字符之前的匹配关系，除此之外，如果p该位置的字符为*，那么再分两种情况，一种p*前的字符不等于s当前的字符，并且p*前的字符不为'.'，那么dp[i][j] = dp[i][j - 2]，即p中的*和前一个字符表示一个空串，另一种情况则是前一种的反面，否则dp[i][j] = dp[i][j - 2](X*表示空串)||dp[i][j - 1](X*表示一个X)||dp[i - 1][j](X*表示多个X)，就此动态规划完毕，最后返回dp[s.Length][p.Length];