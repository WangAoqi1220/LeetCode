题干：
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

解法：
通过DFS深搜加上剪枝来回溯计算，我们遍历矩阵中的每一个元素，都将其作为首个节点，来进行dfs，直至其中一条路径完全符合，则返回true，不然返回false。
dfs包含了输入的矩阵，输入的字符串，当前处理元素在矩阵中的行和列，当前比较的字符在目标字符串的位置，当行列越界或当前字符不等于目标字符串当前指针的字符时，返回false，当这个指针已经指向了目标字符串的最后一位时（因为在此之前已经做过比较，说明最后一位也与目标字符串中的最后一位相等），则返回true，我们将访问过的地方替换成"\"，表示已经访问过了，并将之前的值存储在tmp里，在递归回溯结束后还原该值，回溯的部分就是向当前位置的上下左右分别调用dfs，只要有一个返回true，则总的dfs函数返回true