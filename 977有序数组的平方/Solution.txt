题干：
给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。
示例 1：
输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：
输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]

解法一：
遍历数组，每一个元素平方后放入新数组，再对新数组进行排序
解法二：
运用双指针，因为数组头尾为绝对值较大的数，因此设置头尾双指针，比较两个数的平方，将更大的值放入新数组的末位，相应的数组指针向内移动，直到两个指针重合，重合位置的指针一定为原数组中绝对值最小的元素，平方后放入新数组的第一位
解法三：
方法一没有利用「数组A已经按照升序排序」这个条件。显然，如果数组A中的所有数都是非负数，那么将每个数平方后，数组仍然保持升序；如果数组A中的所有数都是负数，那么将每个数平方后，数组会保持降序。
这样一来，如果我们能够找到数组A中负数与非负数的分界线，那么就可以用类似「归并排序」的方法了。具体地，我们设neg为数组A中负数与非负数的分界线，也就是说，A[0]到A[neg]均为负数，而 A[neg+1]到A[n−1]均为非负数。当我们将数组A中的数平方后，那么A[0]到A[neg]单调递减，A[neg+1] 到A[n−1]单调递增。
由于我们得到了两个已经有序的子数组，因此就可以使用归并的方法进行排序了。具体地，使用两个指针分别指向位置neg和neg+1，每次比较两个指针对应的数，选择较小的那个放入答案并移动指针。当某一指针移至边界时，将另一指针还未遍历到的数依次放入答案。
